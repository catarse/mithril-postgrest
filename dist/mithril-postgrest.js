var Postgrest = (function (prop,_,mithril) {
'use strict';

prop = prop && prop.hasOwnProperty('default') ? prop['default'] : prop;
_ = _ && _.hasOwnProperty('default') ? _['default'] : _;
mithril = mithril && mithril.hasOwnProperty('default') ? mithril['default'] : mithril;

var filtersVM = function filtersVM(attributes) {
    var newVM = {},
        filter = function filter() {
        var innerProp = prop(''),
            filterProp = function filterProp(value) {
            if (arguments.length > 0) {
                innerProp(value);
                return newVM;
            }
            return innerProp();
        };
        // Just so we can have a default to_filter and avoid if _.isFunction calls
        filterProp.toFilter = function () {
            return _.isString(filterProp()) ? filterProp().trim() : filterProp();
        };

        filterProp.objectToLogicOperation = function (obj) {
            return '(' + Object.keys(obj).map(function (key) {
                if (key === 'or' || key === 'and') {
                    return '' + key + filterProp.objectToLogicOperation(obj[key]);
                } else {
                    return '' + Object.keys(obj[key]).map(function (innerKey) {
                        if (innerKey === 'or' || innerKey === 'and') {
                            return '' + innerKey + filterProp.objectToLogicOperation(obj[key][innerKey]);
                        } else {
                            return key + '.' + innerKey + '.' + obj[key][innerKey];
                        }
                    }).join(',');
                }
            }).join(',') + ')';
        };

        return filterProp;
    },
        getters = _.reduce(attributes, function (memo, operator, attr) {
        // The operator between is implemented with two properties, one for greater than value and another for lesser than value.
        // Both properties are sent in the queurystring with the same name,
        // that's why we need the special case here, so we can use a simple map as argument to filtersVM.
        if (operator === 'between') {
            memo[attr] = {
                lte: filter(),
                gte: filter()
            };
        } else {
            memo[attr] = filter();
        }
        return memo;
    }, {
        order: filter()
    }),
        parametersWithoutOrder = function parametersWithoutOrder() {
        return _.reduce(getters, function (memo, getter, attr) {
            if (attr !== 'order') {
                var operator = attributes[attr];

                if (_.isFunction(getter.toFilter) && (getter.toFilter() === undefined || getter.toFilter() === '')) {
                    return memo;
                }

                // Bellow we use different formatting rules for the value depending on the operator
                // These rules are used regardless of the toFilter function,
                // so the user can use a custom toFilter without having to worry with basic filter syntax
                if (operator === 'ilike' || operator === 'like') {
                    memo[attr] = operator + '.*' + getter.toFilter() + '*';
                } else if (operator === '@@') {
                    memo[attr] = operator + '.' + getter.toFilter().replace(/\s+/g, '&');
                } else if (operator === 'between') {
                    if (!getter.lte.toFilter() && !getter.gte.toFilter()) {
                        return memo;
                    }
                    memo[attr] = [];
                    if (getter.gte()) {
                        memo[attr].push('gte.' + getter.gte.toFilter());
                    }
                    if (getter.lte()) {
                        memo[attr].push('lte.' + getter.lte.toFilter());
                    }
                } else if (operator === 'is.null') {
                    memo[attr] = getter.toFilter() === null ? 'is.null' : 'not.is.null';
                } else if (operator === 'or' || operator === 'and') {
                    memo[operator] = getter.objectToLogicOperation(getter.toFilter());
                } else {
                    memo[attr] = operator + '.' + getter.toFilter();
                }
            }
            return memo;
        }, {});
    },
        parameters = function parameters() {
        // The order parameters have a special syntax (just like an order by SQL clause)
        // https://github.com/begriffs/postgrest/wiki/Routing#filtering-and-ordering
        var order = function order() {
            return getters.order() && _.reduce(getters.order(), function (memo, direction, attr) {
                memo.push(attr + '.' + direction);
                return memo;
            }, []).join(',');
        },
            orderParameter = order() ? {
            order: order()
        } : {};

        return _.extend({}, orderParameter, parametersWithoutOrder());
    };

    return _.extend(newVM, getters, {
        parameters: parameters,
        parametersWithoutOrder: parametersWithoutOrder
    });
};

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var paginationVM = function paginationVM(mithilInstance) {
    return function (model, order) {
        var extraHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var authenticate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

        var collection = prop([]),
            defaultOrder = order || 'id.desc',
            filters = prop({
            order: defaultOrder
        }),
            isLoading = prop(false),
            page = prop(1),
            resultsCount = prop(),
            pageRequest = authenticate ? model.getPageWithToken : model.getPage,
            total = prop();

        var fetch = function fetch() {
            return new Promise(function (resolve, reject) {

                var getTotal = function getTotal(xhr) {
                    if (!xhr || xhr.status === 0) {
                        return JSON.stringify({
                            hint: null,
                            details: null,
                            code: 0,
                            message: 'Connection error'
                        });
                    }
                    var rangeHeader = xhr.getResponseHeader('Content-Range');
                    if (_.isString(rangeHeader)) {
                        var _rangeHeader$split = rangeHeader.split('/'),
                            _rangeHeader$split2 = _slicedToArray(_rangeHeader$split, 2),
                            headerSize = _rangeHeader$split2[0],
                            headerCount = _rangeHeader$split2[1],
                            _headerSize$split = headerSize.split('-'),
                            _headerSize$split2 = _slicedToArray(_headerSize$split, 2),
                            headerFrom = _headerSize$split2[0],
                            headerTo = _headerSize$split2[1],
                            to = parseInt(headerTo) + 1 || 0,
                            from = parseInt(headerFrom) || 0;

                        total(parseInt(headerCount));
                        resultsCount(to - from);
                    }

                    try {
                        return JSON.parse(xhr.responseText);
                    } catch (ex) {
                        return JSON.stringify({
                            hint: null,
                            details: null,
                            code: 0,
                            message: xhr.responseText
                        });
                    }
                };
                isLoading(true);
                pageRequest(filters(), page(), {
                    background: false,
                    extract: getTotal
                }, extraHeaders).then(function (data) {
                    collection(_.union(collection(), data));
                    isLoading(false);
                    resolve(collection());
                }).catch(function (error) {
                    isLoading(false);
                    total(0);
                    reject(error);
                });
            });
        },
            firstPage = function firstPage(parameters) {
            filters(_.extend({
                order: defaultOrder
            }, parameters));
            collection([]);
            page(1);
            return fetch();
        },
            isLastPage = function isLastPage() {
            return model.pageSize() > resultsCount();
        },
            nextPage = function nextPage() {
            page(page() + 1);
            return fetch();
        };

        return {
            collection: collection,
            firstPage: firstPage,
            isLoading: isLoading,
            nextPage: nextPage,
            isLastPage: isLastPage,
            total: total,
            resultsCount: resultsCount
        };
    };
};

/**
 * This takes the mithril instance that will handle redraw 
 * on occurence of a dom element event or some m.request
 * call.
 * @param {Mithril} mithrilInstance 
 */
function Postgrest(mithrilInstance) {
    var m = mithrilInstance || mithril;
    var postgrest = {};
    var token = prop(),
        mergeConfig = function mergeConfig(config, options) {
        return options && _.isFunction(options.config) ? _.compose(options.config, config) : config;
    },
        addHeaders = function addHeaders(headers) {
        return function (xhr) {
            _.each(headers, function (value, key) {
                xhr.setRequestHeader(key, value);
            });
            return xhr;
        };
    },
        addConfigHeaders = function addConfigHeaders(headers, options) {
        return _.extend({}, options, {
            config: mergeConfig(addHeaders(headers), options)
        });
    },
        createLoader = function createLoader(requestFunction, options) {
        var defaultState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        var loader = prop(defaultState);
        loader.load = function () {

            return new Promise(function (resolve, reject) {
                loader(true);
                requestFunction(_.extend({}, options, {
                    background: false
                })).then(function (data) {
                    loader(false);
                    resolve(data);
                }).catch(function (error) {
                    loader(false);
                    reject(error);
                });
            });
        };
        return loader;
    },
        representationHeader = {
        'Prefer': 'return=representation'
    };

    postgrest.token = token;

    postgrest.init = function (apiPrefix, authenticationOptions) {
        var globalHeader = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        postgrest.request = function (options) {
            var errorHandler = function errorHandler(xhr) {
                try {
                    return JSON.parse(xhr.responseText);
                } catch (ex) {
                    return JSON.stringify({
                        hint: null,
                        details: null,
                        code: 0,
                        message: xhr.responseText
                    });
                }
            };
            var configHeadersToAdd = addConfigHeaders(globalHeader, _.extend({ extract: errorHandler }, options, {
                url: apiPrefix + options.url
            }));
            return m.request(configHeadersToAdd);
        };

        var authenticationRequested = prop(false);
        postgrest.authenticate = function (delegatedDeferred) {
            var deferred = delegatedDeferred || new Promise(function (resolve, reject) {
                var workingCall = function workingCall() {
                    if (token()) {
                        resolve({ token: token() });
                    } else if (!authenticationRequested()) {

                        authenticationRequested(true);
                        m.request(_.extend({}, authenticationOptions)).then(function (data) {
                            authenticationRequested(false);
                            token(data.token);
                            resolve({ token: token() });
                        }).catch(function (data) {
                            authenticationRequested(false);
                            reject(data);
                        });
                    } else {
                        setTimeout(workingCall, 250);
                    }
                };
                workingCall();
            });
            return deferred;
        };

        postgrest.requestWithToken = function (options) {

            return postgrest.authenticate().then(function () {
                return postgrest.request(addConfigHeaders({
                    'Authorization': 'Bearer ' + token()
                }, options));
            }).catch(function () {
                return postgrest.request(options);
            });
        };

        postgrest.loader = _.partial(createLoader, postgrest.request);

        postgrest.loaderWithToken = _.partial(createLoader, postgrest.requestWithToken);

        postgrest.model = function (name) {
            var paginationHeaders = function paginationHeaders(page, pageSize) {
                if (!pageSize) {
                    return;
                }

                var toRange = function toRange() {
                    var from = (page - 1) * pageSize,
                        to = from + pageSize - 1;
                    return from + '-' + to;
                };

                return {
                    'Range-unit': 'items',
                    'Range': toRange()
                };
            },
                pageSize = prop(10),
                nameOptions = {
                url: '/' + name
            },
                getOptions = function getOptions(data, page, pageSize, options) {
                var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

                var extraHeaders = _.extend({}, {
                    'Prefer': 'count=none'
                }, headers, paginationHeaders(page, pageSize));
                return addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'GET',
                    data: data
                }));
            },
                querystring = function querystring(filters, options) {
                options.url += '?' + m.buildQueryString(filters);
                return options;
            },
                options = function options(_options) {
                return postgrest.request(_.extend({}, _options, nameOptions, {
                    method: 'OPTIONS'
                }));
            },
                postOptions = function postOptions(attributes, options) {
                var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                var extraHeaders = _.extend({}, representationHeader, headers);
                return addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'POST',
                    data: attributes
                }));
            },
                deleteOptions = function deleteOptions(filters, options) {
                var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                var extraHeaders = _.extend({}, representationHeader, headers);
                return querystring(filters, addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'DELETE'
                })));
            },
                patchOptions = function patchOptions(filters, attributes, options) {
                var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

                var extraHeaders = _.extend({}, representationHeader, headers);
                return querystring(filters, addConfigHeaders(extraHeaders, _.extend({}, options, nameOptions, {
                    method: 'PATCH',
                    data: attributes
                })));
            },
                getPageOptions = function getPageOptions(data, page, options) {
                var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

                return getOptions(data, page || 1, pageSize(), options, headers);
            },
                getRowOptions = function getRowOptions(data, options) {
                var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                return getOptions(data, 1, 1, options, headers);
            };

            return {
                pageSize: pageSize,
                getPageOptions: getPageOptions,
                getRowOptions: getRowOptions,
                patchOptions: patchOptions,
                postOptions: postOptions,
                deleteOptions: deleteOptions,
                getPage: _.compose(postgrest.request, getPageOptions),
                getRow: _.compose(postgrest.request, getRowOptions),
                patch: _.compose(postgrest.request, patchOptions),
                post: _.compose(postgrest.request, postOptions),
                deleteRequest: _.compose(postgrest.request, deleteOptions),
                getPageWithToken: _.compose(postgrest.requestWithToken, getPageOptions),
                getRowWithToken: _.compose(postgrest.requestWithToken, getRowOptions),
                patchWithToken: _.compose(postgrest.requestWithToken, patchOptions),
                postWithToken: _.compose(postgrest.requestWithToken, postOptions),
                deleteWithToken: _.compose(postgrest.requestWithToken, deleteOptions),
                options: options
            };
        };

        return postgrest;
    };

    postgrest.filtersVM = filtersVM;
    postgrest.paginationVM = paginationVM(mithrilInstance);

    return postgrest;
}

return Postgrest;

}(prop,_,m));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
